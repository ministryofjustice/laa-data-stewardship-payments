name: Build and test PR

on:
  push:
    branches:
      - 'test-ci/**'

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-jar
          path: claims-data/service/build/libs/*.jar
          retention-days: 1

      - name: Test coverage verification
        run: ./gradlew jacocoTestCoverageVerification

      - name: Integration test
        run: ./gradlew integrationTest --tests '*IntegrationTest'

      - name: Publish package
        run: ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload checkstyle report for claims-data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: claims-data-service/build/reports/checkstyle
          retention-days: 14

      - name: Upload test report for claims-data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: claims-data-service/build/reports/tests
          retention-days: 14

      - name: Upload jacoco coverage report for claims-data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage-report
          path: claims-data-service/build/reports/jacoco
          retention-days: 14

  vulnerability-scan-app:
    runs-on: ubuntu-latest
    needs:
      - build-test
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_TEST_EXCLUDE: build,generated
      SNYK_TARGET_REFERENCE: main
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check app for vulnerabilities
        uses: snyk/actions/gradle@master
        with:
          command: code test
          args: --severity-threshold=high

  vulnerability-scan-docker:
    runs-on: ubuntu-latest
    needs:
      - build-test
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build app jar with gradle
        run: ./gradlew build

      - name: Build a Docker image for claims-data
        run: docker build -t laa-data-stewardship-payments/claims-data:scan ./claims-data

      - name: Run Snyk to check claims-data Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        with:
          image: laa-data-stewardship-payments/claims-data:scan
          args: --file=./claims-data/Dockerfile --severity-threshold=high

  build-deploy-to-dev:
    runs-on: ubuntu-latest
    needs:
      - build-test
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: service-jar
          path: claims-data/service/build/libs/

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build and push a Docker image for claims-data
        run: |
          ls -R
          docker build --no-cache -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./claims-data
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
      - name: Generate K8s Manifests
        uses: ./.github/actions/generate-k8s-manifests
        with:
          namespace: ${{ secrets.KUBE_NAMESPACE }}
      - name: Deploy to K8s
        uses: ./.github/actions/deploy-to-k8s
        with:
          namespace: ${{ secrets.KUBE_NAMESPACE }}

  deploy-to-uat:
    runs-on: ubuntu-latest
    needs:
      - build-deploy-to-dev
    environment:
      name: uat  # this triggers the required approval step
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - run: echo "Deploying to UAT"
      - name: Checkout only UAT deployment files
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployments/templates
          sparse-checkout-cone-mode: false
          fetch-depth: 1
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Generate K8s Manifests
        uses: ./.github/actions/generate-k8s-manifests
        with:
          namespace: laa-data-stewardship-payments-uat
      - name: Deploy to K8s
        uses: ./.github/actions/deploy-to-k8s
        with:
          namespace: laa-data-stewardship-payments-uat
